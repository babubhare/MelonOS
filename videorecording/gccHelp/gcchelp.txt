Compilation Process:
1. Preprocessing
2. Compilation: Convert High Level language to Assembly language
3. Assembler: Convert Assembly Language to Object or Machine code
4. Linker: Link multiple object files to create an execuatable


Preprocessing:
gcc -E elf.c -o elf.p

COmpilation: Creating assembly FIle:
/usr/libexec/gcc/x86_64-linux-gnu/13/cc1 elf.p
creates a elf.s file

From Assembly code convert to object code:
as elf.s -o elf.o
object code is Machine Code 

Next is the Linker:
ld -dynamic-Linker elf.o and all the runtime object files


To Dis Assemble
objdump -d -M intel elf.o
objdump -d -M intel a.out


When an assembly file is converted to object code which is the Machine Code; unresolved symbols are maintained
The Linker takes all the Object FIles and combines to single executable file.
Puts the code to .text section for code
Linker Job:
1. Symbol REsolution
2. Object Relocation

nm object files will list symbols
nm kernel.asm.o


https://cs.lmu.edu/~ray/notes/x86assembly/

readelf objectfile -a
nm objectfile

